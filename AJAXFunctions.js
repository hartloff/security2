



function addComment() {

    var xmlhttp = new XMLHttpRequest();
    xmlhttp.onreadystatechange = function () {
        if (xmlhttp.readyState == 4) {
            getAllComments();
        }
    };

    // get value from the form
    var comment = encodeURIComponent(document.getElementById("Comment").value);

    // blank out the form
    document.getElementById("Comment").value = '';

    // make and send the request
    var params = "requestType=addComment&comment=" + comment;
    xmlhttp.open("POST", "cgi-bin/security_interface.cgi", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send(params);

    // Note that this function creates a POST request. This behaves the same as a GET request except the parameter do not
    // appear in the url. Instead, we send the parameters inside the send function. This is processed in python in
    // the same way as a GET request. We have a need for POST requests since the inputs can now contain spaces which
    // are not allowed inside a url.
}




function getAllComments() {
    var xmlhttp = new XMLHttpRequest();
    xmlhttp.onreadystatechange = function () {
        if (xmlhttp.readyState == 4) {
            // Parse and write the results of the request to the empty div with the id allSongs
            document.getElementById("allComments").innerHTML = xmlhttp.responseText;
        }
    };
    // We can use a GET request since there are no variables
    xmlhttp.open("GET", "cgi-bin/security_interface.cgi?requestType=getAllComments", true);
    xmlhttp.send();
}










// Send title, artist and YouTube link from a user to the server
function addSong() {

    var xmlhttp = new XMLHttpRequest();
    xmlhttp.onreadystatechange = function () {
        if (xmlhttp.readyState == 4) {
            getAllSongs();
        }
    };

    // get value from the form
    var title = document.getElementById("Title").value;
    var artist = document.getElementById("Artist").value;
    var link = document.getElementById("YouTubeLink").value;

    // blank out the form
    document.getElementById("Title").value = '';
    document.getElementById("Artist").value = '';
    document.getElementById("YouTubeLink").value = '';

    // make and send the request
    var params = "requestType=addSong&title=" + title + "&artist=" + artist + "&link=" + link;
    xmlhttp.open("POST", "cgi-bin/song_interface.cgi", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send(params);

    // Note that this function creates a POST request. This behaves the same as a GET request except the parameter do not
    // appear in the url. Instead, we send the parameters inside the send function. This is processed in python in
    // the same way as a GET request. We have a need for POST requests since the inputs can now contain spaces which
    // are not allowed inside a url.
}


// Send review of a song to the server. This is called by forms that are generated by parseAllSongs(songs)
function addReview(songID) {
    var xmlhttp = new XMLHttpRequest();
    xmlhttp.onreadystatechange = function () {
        if (xmlhttp.readyState == 4) {
            getAllSongs();
        }
    };

    // get the review and blank out the form
    var review = document.getElementById("review_" + songID).value;
    document.getElementById("review_" + songID).value = "";

    // construct and send the request
    var params = "requestType=addReview&id=" + songID + "&review=" + review;
    xmlhttp.open("POST", "cgi-bin/song_interface.cgi", true);
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send(params);
}


function getAllSongs() {
    var xmlhttp = new XMLHttpRequest();
    xmlhttp.onreadystatechange = function () {
        if (xmlhttp.readyState == 4) {
            // Parse and write the results of the request to the empty div with the id allSongs
            document.getElementById("allSongs").innerHTML = parseAllSongs(xmlhttp.responseText);
        }
    };
    // We can use a GET request since there are no variables
    xmlhttp.open("GET", "cgi-bin/song_interface.cgi?requestType=getAllSongsAndReviews", true);
    xmlhttp.send();
}


// generate an HTML table with the song and review data returned from a getAllSongsAndReviews request
function parseAllSongs(songs) {
    var parsed = "";
    parsed += '<div class="reviews">\n';
    parsed += '<table class="table table-bordered"><tbody>';
    var allSongs = JSON.parse(songs);
    //# {songID : [title, artist, YouTubeLink, [review1, review2,...]],
    //# songID : [title, artist, YoutubeLink, [review1, review2,...]],...}
    for (var songID in allSongs) {
        var songList = allSongs[songID];
        var title = songList[0];
        var artist = songList[1];
        var link = songList[2];
        var reviews = songList[3];

        parsed += '<tr class="info">';
        parsed += '<td><h5>' + title + '</h5></td>';
        parsed += '<td><h5>' + artist + '</h5></td>';
        parsed += '<td><h5><a href="' + link + '">YouTube</a></h5></td>';
        parsed += '</tr>';
        for (var i in reviews) {
            parsed += '<tr>';
            parsed += '<td colspan="3">' + reviews[i] + '</td>';
            parsed += '</tr>';
        }
        parsed += '<tr>';

        // create a separate form for each song for users to add reviews/comments
        parsed += '<td colspan="3"><form>';
        parsed += '<input class="form-control" id="review_' + songID + '" placeholder="Review">';
        parsed += '<h4><a href="#" onclick="addReview(' + songID + ');return false;"><span class="label label-primary">Submit Review</span></a></h4>';
        parsed += '</form></td>';
        parsed += '</tr>';
    }
    parsed += '</table>';
    parsed += '</div>\n\n';
    return parsed;
}

